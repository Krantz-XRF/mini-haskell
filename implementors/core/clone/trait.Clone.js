(function() {var implementors = {};
implementors["mini_haskell"] = [{"text":"impl Clone for Void","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone, M:&nbsp;Clone&gt; Clone for Result3&lt;T, E, M&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ModuleId","synthetic":false,"types":[]},{"text":"impl Clone for QName","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LexemeType","synthetic":false,"types":[]},{"text":"impl Clone for Lexeme","synthetic":false,"types":[]},{"text":"impl Clone for RId","synthetic":false,"types":[]},{"text":"impl Clone for ROp","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for RawInput&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Input&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Location","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl Clone for LexError","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TryFromBigIntError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["unic_char_property"] = [{"text":"impl&lt;V:&nbsp;Clone + 'static&gt; Clone for CharDataTable&lt;V&gt;","synthetic":false,"types":[]}];
implementors["unic_char_range"] = [{"text":"impl Clone for CharIter","synthetic":false,"types":[]},{"text":"impl Clone for CharRange","synthetic":false,"types":[]}];
implementors["unic_common"] = [{"text":"impl Clone for UnicodeVersion","synthetic":false,"types":[]}];
implementors["unic_ucd_category"] = [{"text":"impl Clone for GeneralCategory","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()