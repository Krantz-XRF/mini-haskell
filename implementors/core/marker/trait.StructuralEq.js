(function() {var implementors = {};
implementors["mini_haskell"] = [{"text":"impl&lt;T, E, M&gt; StructuralEq for Result3&lt;T, E, M&gt;","synthetic":false,"types":[]},{"text":"impl StructuralEq for ModuleId","synthetic":false,"types":[]},{"text":"impl StructuralEq for QName","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl StructuralEq for LexemeType","synthetic":false,"types":[]},{"text":"impl StructuralEq for Lexeme","synthetic":false,"types":[]},{"text":"impl StructuralEq for RId","synthetic":false,"types":[]},{"text":"impl StructuralEq for ROp","synthetic":false,"types":[]},{"text":"impl StructuralEq for EnrichedLexeme","synthetic":false,"types":[]},{"text":"impl StructuralEq for Location","synthetic":false,"types":[]},{"text":"impl StructuralEq for Range","synthetic":false,"types":[]},{"text":"impl StructuralEq for LexError","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl StructuralEq for Sign","synthetic":false,"types":[]},{"text":"impl StructuralEq for ParseBigIntError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for TryFromBigIntError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; StructuralEq for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["unic_char_range"] = [{"text":"impl StructuralEq for CharRange","synthetic":false,"types":[]}];
implementors["unic_common"] = [{"text":"impl StructuralEq for UnicodeVersion","synthetic":false,"types":[]}];
implementors["unic_ucd_category"] = [{"text":"impl StructuralEq for GeneralCategory","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()