(function() {var implementors = {};
implementors["mini_haskell"] = [{"text":"impl&lt;I&gt; UnwindSafe for IterStream&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for IterStreamMultiPeek&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Void","synthetic":true,"types":[]},{"text":"impl&lt;T, E, M&gt; UnwindSafe for Result3&lt;T, E, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for NotPred&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; UnwindSafe for OrPred&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; UnwindSafe for AndPred&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ascii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QName","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexemeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lexeme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ROp","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, U:&nbsp;?Sized&gt; UnwindSafe for RcView&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for RawInput&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Input&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Scanner&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Small","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Large","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Graphic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Special","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Digit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Octit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hexit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhiteChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for RawLexemeIterator&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for FatLexemeIterator&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for EnrichedLexemeIterator&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for AugmentedLexemeIterator&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnrichedLexeme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AugmentedLexeme","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DiagnosticMessage","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["unic_ucd_category"] = [{"text":"impl UnwindSafe for GeneralCategory","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()